// Client protocol definitions - revision 3
option java_package = "org.kontalk.client";
option java_outer_classname = "Protocol";
option optimize_for = LITE_RUNTIME;


// authentication request
message AuthenticateRequest {
    required string token = 1;
}

// authentication response
message AuthenticateResponse {
    required bool valid = 1;
}

// message post request
message MessagePostRequest {
    repeated string recipient = 1;
    optional string mime = 2;
    // flags: encrypted, attachment
    repeated string flags = 3;
    optional bytes content = 4;
}

// message post response
message MessagePostResponse {
    message MessageSent {
        enum MessageSentStatus {
            STATUS_SUCCESS = 0;
            STATUS_ERROR = 1;
            STATUS_BUSY = 2;
            STATUS_USER_NOTFOUND = 3;
            STATUS_BIG = 4;
            STATUS_NOTSUPPORTED = 5;
        }
        required MessageSentStatus status = 1;
        required string user_id = 2;
        optional string message_id = 3;
    }
    repeated MessageSent entry = 1;
}

// new message
message NewMessage {
    required string message_id = 1;
    // timestamp string: YYYY-MM-DD hh:mm:ss
    required string timestamp = 2;
    required string sender = 3;
    repeated string group = 4;
    optional string original_id = 5;
    required string mime = 6;
    repeated string flags = 7;
    required bytes content = 8;
    optional string url = 9;
    required bool need_ack = 10;
    optional uint64 length = 11;
}

// message acknowledgement request
message MessageAckRequest {
    repeated string message_id = 1;
}

// message acknowledgement response
message MessageAckResponse {
    message Entry {
        enum MessageAckStatus {
            STATUS_SUCCESS = 0;
            STATUS_ERROR = 1;
            STATUS_NOTFOUND = 2;
        }
        required string message_id = 1;
        required MessageAckStatus status = 2;
    }
    repeated Entry entry = 1;
}

// receipt message
message ReceiptMessage {
    message Entry {
        enum ReceiptStatus {
            STATUS_SUCCESS = 0;
            STATUS_ERROR = 1;
            STATUS_USER_NOTFOUND = 2;
            STATUS_TTL_EXPIRED = 3;
        }
        required string message_id = 1;
        required ReceiptStatus status = 2;
        // timestamp string: YYYY-MM-DD hh:mm:ss
        optional string timestamp = 3;
    }
    repeated Entry entry = 1;
}

// registration request
message RegistrationRequest {
    required string username = 1;
}

// registration response
message RegistrationResponse {
    enum RegistrationStatus {
        STATUS_SUCCESS = 0;
        STATUS_ERROR = 1;
        // registration requires more steps to complete
        STATUS_CONTINUE = 2;
        STATUS_INVALID_USERNAME = 3;
    }
    required RegistrationStatus status = 1;
    // used only in single-step authentication
    optional string token = 2;
    // used only in SMS-based registration
    optional string sms_from = 3;
    // used only in email-based registration
    optional string email_from = 4;
}

// validation request (registration 2nd step)
message ValidationRequest {
    required string validation_code = 1;
}

// validation response (registration 2nd step)
message ValidationResponse {
    enum ValidationStatus {
        STATUS_SUCCESS = 0;
        STATUS_ERROR = 1;
        STATUS_FAILED = 2;
    }
    required ValidationStatus status = 1;
    optional string token = 2;
}

// user lookup request
message UserLookupRequest {
    repeated string user_id = 1;
}

// user lookup response
message UserLookupResponse {
    message Entry {
        required string user_id = 1;
        optional uint64 timestamp = 2;
        optional string status = 3;
        // difference between timestamp and local server time (0 means online)
        optional uint64 timediff = 4;
    }
    repeated Entry entry = 1;
}

// file upload response
message FileUploadResponse {
    enum FileUploadStatus {
        STATUS_SUCCESS = 0;
        STATUS_ERROR = 1;
        STATUS_FAILED = 2;
        STATUS_BIG = 3;
        STATUS_NOTSUPPORTED = 4;
    }
    required FileUploadStatus status = 1;
    optional string file_id = 2;
}

// server info request
message ServerInfoRequest {
    optional uint32 client_protocol = 1;
    optional string client_version = 2;
}

// server info response
message ServerInfoResponse {
    required string version = 1;
    required uint32 client_protocol = 2;
    required uint32 server_protocol = 3;
    required string fingerprint = 4;
    // supported features
    repeated string supports = 5;
}

// user update request
message UserInfoUpdateRequest {
    optional string status_message = 1;
    optional string google_registration_id = 2;
}

// user update response
message UserInfoUpdateResponse {
    enum UserInfoUpdateStatus {
        STATUS_SUCCESS = 0;
        STATUS_ERROR = 1;
        STATUS_BIG = 2;
    }
    required UserInfoUpdateStatus status = 1;
}

// user presence subscription request
message UserPresenceSubscribeRequest {
    // TODO support for multiple subscriptions
    required string user_id = 1;
    required uint32 events = 2;
}

enum UserEventMask {
    USER_EVENT_MASK_ONLINE = 1;
    USER_EVENT_MASK_OFFLINE = 2;
    USER_EVENT_MASK_STATUS_CHANGED = 4;
    // max value - just for checking
    USER_EVENT_MASK_ALL = 7;
}

// user presence subscription response
message UserPresenceSubscribeResponse {
    enum UserPresenceStatus {
        STATUS_SUCCESS = 0;
        STATUS_ERROR = 1;
        STATUS_INVALID_USERNAME = 2;
        STATUS_USER_NOTFOUND = 3;
        STATUS_NOTSUPPORTED = 4;
    }
    required UserPresenceStatus status = 1;
}

// user presence message
message UserPresence {
    enum UserEvent {
        EVENT_ONLINE = 1;
        EVENT_OFFLINE = 2;
        EVENT_STATUS_CHANGED = 3;
    }
    required UserEvent event = 2;
    optional string status_message = 3;
}

// server list
message ServerList {
    required uint64 timestamp = 1;
    message Entry {
        required string address = 1;
        optional uint32 port = 2;
        optional uint32 http_port = 3;
    }
    repeated Entry entry = 2;
}

// ping request
message Ping {
    // utc timestamp
    optional uint64 timestamp = 1;
}

// ping response
message Pong {
    // utc timestamp
    optional uint64 timestamp = 1;
}
